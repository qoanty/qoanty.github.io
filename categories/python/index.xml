<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 百年孤独的博客</title>
    <link>https://qoanty.github.io/categories/python/</link>
    <description>Recent content in Python on 百年孤独的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 15 May 2019 08:53:24 +0800</lastBuildDate>
    
	<atom:link href="https://qoanty.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python虚拟环境和包管理工具Pipenv</title>
      <link>https://qoanty.github.io/2019/05/python-pipenv/</link>
      <pubDate>Wed, 15 May 2019 08:53:24 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/05/python-pipenv/</guid>
      <description>Pipenv是Kenneth Reitz的作品，Python官方推荐的包管理工具，它能够有效管理python多个版本及各种包。 它主要有以下特性： Pipenv集成了pip，virtualenv两者的功能，且完善了两者的一些缺陷。 Pipenv使用</description>
    </item>
    
    <item>
      <title>极验滑动验证码识别</title>
      <link>https://qoanty.github.io/2019/05/sliding-captcha/</link>
      <pubDate>Tue, 07 May 2019 09:24:08 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/05/sliding-captcha/</guid>
      <description>搭建测试环境 从Python官网下载64位Python并安装，打开CMD窗口输入pip install selenium安装web应用程序测试系统，下载chrome安装包，根据安装引导安装chrome浏览器，从WebDriver for Chrome网上下载与chr</description>
    </item>
    
    <item>
      <title>Python3 数据结构</title>
      <link>https://qoanty.github.io/2019/04/python3-data-structure/</link>
      <pubDate>Thu, 25 Apr 2019 15:36:02 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-data-structure/</guid>
      <description>Python支持以下数据结构：列表list，字典dict，元组tuple，集合set。 使用字典： 需要键：值对之间的逻辑关联时。 需要基于自定义密钥快速查找数据时。 数据不断修改时，字典是可变的。 使用其他类型： 不需要随机访问的数据集合，请使用列表</description>
    </item>
    
    <item>
      <title>Python3 学习笔记（异步爬虫）</title>
      <link>https://qoanty.github.io/2019/04/python3-web-scraping/</link>
      <pubDate>Sun, 21 Apr 2019 21:06:02 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-web-scraping/</guid>
      <description>异步爬虫不同于多进程爬虫，它使用单线程(即仅创建一个事件循环，然后把所有任务添加到事件循环中)就能并发处理多任务。在轮询到某个任务后，当遇到耗时操作(如请求URL)时，挂起该任务并进行下一个任务，当之前被挂起的任务更新了状态(如获得了网页响</description>
    </item>
    
    <item>
      <title>Python3 学习笔记（异步IO）</title>
      <link>https://qoanty.github.io/2019/04/python3-asyncio/</link>
      <pubDate>Sun, 21 Apr 2019 15:01:59 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-asyncio/</guid>
      <description>由于CPU的速度远远快于磁盘、网络等IO，在一个线程中CPU执行代码的速度极快，一旦遇到IO操作，如读写文件、发送网络数据时，就需要等待IO操作完成，才能继续进行下一步操作，这种情况称为同步IO。 异步IO是当代码需要执行一个耗时的IO操作时</description>
    </item>
    
    <item>
      <title>Python3 学习笔记（内建模块）</title>
      <link>https://qoanty.github.io/2019/04/python3-built-in-functions-modules/</link>
      <pubDate>Sun, 21 Apr 2019 11:58:09 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-built-in-functions-modules/</guid>
      <description>常用内建模块 datetime 获取当前日期和时间 1 2 3 4 5 6 7 &amp;gt;&amp;gt;&amp;gt; from datetime import datetime &amp;gt;&amp;gt;&amp;gt; now = datetime.now() # 获取当前datetime &amp;gt;&amp;gt;&amp;gt; print(now) 2019-05-15 19:34:57.142524 &amp;gt;&amp;gt;&amp;gt; print(type(now)) &amp;lt;class &amp;#39;datetime.datetime&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; 注意到datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入的才是datet</description>
    </item>
    
    <item>
      <title>Python3 学习笔记（分布式进程）</title>
      <link>https://qoanty.github.io/2019/04/python3-distributed-processes/</link>
      <pubDate>Sat, 20 Apr 2019 20:07:34 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-distributed-processes/</guid>
      <description>进程与多进程 对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。 Pytho</description>
    </item>
    
    <item>
      <title>Python3 学习笔记（面向对象编程）</title>
      <link>https://qoanty.github.io/2019/04/python3-object-oriented-programming/</link>
      <pubDate>Sat, 20 Apr 2019 11:39:49 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-object-oriented-programming/</guid>
      <description>面向对象编程 面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。 面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他</description>
    </item>
    
    <item>
      <title>Python3 学习笔记（函数式编程）</title>
      <link>https://qoanty.github.io/2019/04/python3-functional-programming/</link>
      <pubDate>Fri, 19 Apr 2019 19:23:49 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-functional-programming/</guid>
      <description>函数式编程 函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。 对于编程语言，就是越低级的语言</description>
    </item>
    
    <item>
      <title>Python3 学习笔记（高级特性）</title>
      <link>https://qoanty.github.io/2019/04/python3-advanced-features/</link>
      <pubDate>Fri, 19 Apr 2019 15:04:36 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-advanced-features/</guid>
      <description>高级特性 在Python中，代码不是越多越好，而是越少越好。代码不是越复杂越好，而是越简单越好，代码越少，开发效率越高。 切片 先创建一个0-99的数列： 1 2 3 &amp;gt;&amp;gt;&amp;gt; L = list(range(100)) &amp;gt;&amp;gt;&amp;gt; L [0, 1, 2, 3, ..., 99] 可以通过切片轻松取出某一段数列。比如前10个数： 1 2 &amp;gt;&amp;gt;&amp;gt; L[:10] [0, 1, 2,</description>
    </item>
    
    <item>
      <title>Python3 学习笔记（函数）</title>
      <link>https://qoanty.github.io/2019/04/python3-functions/</link>
      <pubDate>Fri, 19 Apr 2019 10:14:31 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/python3-functions/</guid>
      <description>函数 调用函数 Python内置了很多有用的函数，可以直接调用，参见官方文档。 调用abs、max函数： 1 2 3 4 5 6 7 8 &amp;gt;&amp;gt;&amp;gt; abs(-20) 20 &amp;gt;&amp;gt;&amp;gt; abs(12.34) 12.34 &amp;gt;&amp;gt;&amp;gt; max(1, 2) 2 &amp;gt;&amp;gt;&amp;gt; max(2, 3, 1, -5) 3 调用数据类型转换函数： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;gt;&amp;gt;&amp;gt; int(&amp;#39;123&amp;#39;) 123 &amp;gt;&amp;gt;&amp;gt; int(12.34) 12 &amp;gt;&amp;gt;&amp;gt; float(&amp;#39;12.34&amp;#39;) 12.34 &amp;gt;&amp;gt;&amp;gt; str(1.23) &amp;#39;1.23&amp;#39; &amp;gt;&amp;gt;&amp;gt; str(100) &amp;#39;100&amp;#39; &amp;gt;&amp;gt;&amp;gt; bool(1) True &amp;gt;&amp;gt;&amp;gt; bool(&amp;#39;&amp;#39;) False 定</description>
    </item>
    
    <item>
      <title>windows 10下使用vim8配置python3开发环境</title>
      <link>https://qoanty.github.io/2019/04/vim-python/</link>
      <pubDate>Fri, 05 Apr 2019 16:57:01 +0800</pubDate>
      
      <guid>https://qoanty.github.io/2019/04/vim-python/</guid>
      <description>安装Python与Vim 从Python官网下载64位Python并安装，从Vim网站下载64位Vim并安装。 运行vim --version，如果列表中有+python/dyn和+python3/dyn， 则Vim编辑器支持Python。在Vim</description>
    </item>
    
  </channel>
</rss>